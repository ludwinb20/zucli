// Sistema Médico - Schema de Base de Datos
// Modelos para gestión de pacientes, facturación y servicios médicos

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Modelo de Roles de Usuario
model Role {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  users User[]
  
  @@map("roles")
}

// Modelo de Usuario (compatible con Auth.js)
model User {
  id            String    @id @default(cuid())
  username      String    @unique  // Para login con usuario
  email         String?   @unique  // Opcional
  password      String    // Hash de la contraseña
  name          String
  roleId        String
  isActive      Boolean   @default(true)
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  role     Role      @relation(fields: [roleId], references: [id])
  accounts Account[]
  sessions Session[]
  
  @@map("users")
}

// Modelo de Account (Auth.js)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// Modelo de Session (Auth.js)
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

// Modelo de VerificationToken (Auth.js)
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Modelo de Paciente
model Patient {
  id              String   @id @default(cuid())
  firstName       String
  lastName        String
  email           String?
  phone           String?
  address         String?
  birthDate       DateTime?
  gender          String?
  rtn             String?  // RTN opcional para facturación
  emergencyContact String?
  medicalHistory  String?
  allergies       String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  consultations Consultation[]
  invoices      Invoice[]
  
  @@map("patients")
}

// Modelo de Servicio Médico
model Service {
  id          String   @id @default(cuid())
  name        String
  description String?
  basePrice   Float
  category    String   // "consulta", "rayos_x", etc.
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  servicePrices ServicePrice[]
  invoiceItems  InvoiceItem[]
  
  @@map("services")
}

// Modelo de Precios Variables por Horario (para Rayos X)
model ServicePrice {
  id        String   @id @default(cuid())
  serviceId String
  startTime String   // Formato HH:MM
  endTime   String   // Formato HH:MM
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  service Service @relation(fields: [serviceId], references: [id])
  
  @@map("service_prices")
}

// Modelo de Consulta Externa
model Consultation {
  id                String   @id @default(cuid())
  patientId         String
  doctorName        String
  diagnosis         String?
  currentIllness    String?
  vitalSigns        String?  // JSON string con signos vitales
  treatment         String?
  observations      String?
  consultationDate  DateTime @default(now())
  status            String   @default("pending") // pending, completed, cancelled
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  patient Patient @relation(fields: [patientId], references: [id])
  
  @@map("consultations")
}

// Modelo de Factura
model Invoice {
  id            String   @id @default(cuid())
  patientId     String
  invoiceNumber String   @unique
  subtotal      Float
  tax           Float    @default(0)
  total         Float
  rtn           String?  // RTN del paciente o factura
  status        String   @default("pending") // pending, paid, cancelled
  paymentMethod String?  // cash, card, transfer
  paymentDate   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  patient     Patient      @relation(fields: [patientId], references: [id])
  invoiceItems InvoiceItem[]
  
  @@map("invoices")
}

// Modelo de Items de Factura
model InvoiceItem {
  id        String   @id @default(cuid())
  invoiceId String
  serviceId String
  quantity  Int      @default(1)
  unitPrice Float
  totalPrice Float
  createdAt DateTime @default(now())
  
  invoice Invoice @relation(fields: [invoiceId], references: [id])
  service Service @relation(fields: [serviceId], references: [id])
  
  @@map("invoice_items")
}
